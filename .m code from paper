________________________________________________________
    This is code for 'Optimisation.m'
________________________________________________________
clear;close all;
format longE

%Declaration of global variables
global History Evals Iter s1 s2 s3 s4 %全局变量（每个.m中声明）， 历史 计数 计数 四个系数
global nop E v y n %参数个数 弹性模量 泊松比 屈服应力 硬化指数

%Starting initial guess values
IGV=[600000 0.25 3000 0.45];  % E v σy n
E=IGV(1,1); v=IGV(1,2); y=IGV(1,3); n=IGV(1,4);
nop=4; %Number of Parameters
s1=1.0e-9; s2=1.0e-4; s3=1.0e-7; s4=1.0e-4; %scale coefficients for each parameters  (???why——for ABAQUS unit?)
InitialParameters=[E*s1, v*s2, y*s3, n*s4]; %参数单位对齐？

%Initialise counters
Iter=0; Evals=0; History=[];

%From here the optimisation starts(means I can't understand now)

%setting optimisation options
Set_options=optimset('TolFun',1e-15,'TolX',1e-15,'MaxIter',10000) % 目标函数最小改变量 优化变量最小改变量 最大迭代次数

%invoke optimizer
[x,resnorm]=lsqnonlin(@objfunction,InitialParameter,[0 1.0000E-05 0 5.000E-06],[inf 4.99999E-05 inf 4.99999E-05],Set_options)
%[x,resorm]=lsqnonlin(↑ 目标函数    ↑初始解向量        ↑参数下/上边界                                                             ）

%Scale th optimised parameters to normal values
x1=x(1)/s1;x2=x(2)/s2;x(3)/s3;x(4)/s4;
OptParam=[x1 x2 x3 x4]; %存储优化变量

%save the optimised parameters in "parameter.txt"
parameter=fopen('parameters.txt','w'); % 建立参数存储文档
fprintf(parameter,'%12.8f %12.8f %12.8f %12.8f', OptParam); %将OptParm存储到parameter.txt中，%12.8f表示
%每个数字十二字节，其中八位小数。
fclose(parameter);

%save the parameter evolution history in "Parameter_history.txt".
History=[History;[Iter Evals x1 x2 x3 x4 resnorm]];
Parameter_history=fopen('Parameter_history.txt','w');
fprintf(parameter,'%6.1f %6.2f %12.8f %12.8f %12.8f %12.8f %12.8f', History); %save('Parameter_history.txt','History','-ascii')
%       ↑Shouldn't this be Parameter_history to save the date of History?
fclose(Parameter_history);

%Call external programme 以下为调用外部操作
%Pre_processing: replacing material parameters in ABAQUS input file%
%ABAQUS job
%Post_processing:extracting loading-unloading curve from ABAQUS odb.file%
!del tempatefile.*  %Deleting previous tempatefile.odb
!pre_processing  %Replacing material parameters in ABAQUS input ile 这个pre_processing指令存在吗? 其为一exe文件
!copy ABAQUS_INPUT_FILE_NAME.inp tempate_file.inp
!abaqus job=tempate_file interactive %input ABAQUS job

end of 'Optimisation.m'
—————————————————————————————————————————————————————
This is code for 'Objective_function.m'
_____________________________________________________
!abaqus cae noGui=post_processing.py   %Extracting load-unload curve from ABAQUS odb.file
%当脚本文件中包含后自动前后处理的相关命令，那么就没有启动ABAQUS CAE/Viewer必要，
%否则徒增加计算成本，相应的命令为abaqus cae noGUI=beam.py或者abaqus viewr no GUI=beam.py

%This function computes the difference between target and simulated curves
function err=f(params)
global Iter Evals History s1 s2 s3 s4 nop nob
global E v y n

%Scale the parameters to normal values
x1=params（1）/s1; x2=params(2)/s2; x3=params(3)/s3; x4=params(4)/s4;
OptParam=[x1 x2 x3 x4];

%save the parameters in parameter.txt
parameter=fopen('parameters.txt','w');
fprintf(parameter,'%12.8f %12.8f %12.8f %12.8f', OptParam);
fclose(parameter);
!del tempatefile.*
!pre_processing   %pre_processing.exe written by C (why not python?)
!copy ABAQUS_INPUT_FILE_NAME.inp tempatefile.inp
!abaqus job=tempatefile interactive  %提交tmpatefile运算
!abaqus cae noGUI=post_processing.py   %脚本打开后处理文件（应该是关于取出数据）

%Invoke the target loading/unloading curve
load loading.txt              %written from real experiment
Dis=loading(:,1);Force=loading(:,2);
load unloading.txt
Dis1=unloading(:,1);Force1=unloading(:,2);
A1=[Force;Force1];
A=[Dis;Dis1];
nob=length(A);
plot(A,A1,'g-'),hold on

%Invoke the loading & unloading curve from FEA
load loading_FEA.txt          %written by post_processing.py
unloading_Dis_FEA=unloading_FEA(:,1);
unloading_Force_FEA=unloading_FEA(:,2);
B1=[loading_Force_FEA;unloading_Force_FEA];
B=[loading_Dis_FEA;unloading_Dis_FEA];

%Plotboth target and simulated loading-unloading curve.
plot(B,B1,'r-'),hold on
ylabel('Load');
xlaber('Indentation displacement');

%The difference between the displacement portions of target and simulated loading&unloading curves.
err=A1-B1;

%calculate the norm of error vector
resnorm=0.5*sum(err.^2);  % 最小二乘误差
History=[History;[Iter Evals x1 x2 x3 x4 resnorm]];
save('history.txt','History','-ascii').
Evals=evals+1;
if rem(Evals,nop)==0
Iter=Iter+1;
end
